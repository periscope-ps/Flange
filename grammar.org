
* Notes
** Flange as an Interpreter
   Flange seemed more complex than it is because we constantly framed the
   language under the header of "compiler".  In truth, Flange is an interpreter
   with the following key features:
   * Programs return an object of type ~Graph~.
   * The ~Graph~ object may contain zero or more ~Function~ objects

* Language
** v0.2
exists    := 'exists' <varlist> ':' <expr>
forall    := 'forall' <varlist> ':' <expr>
varlist   := (<type> SYM ',' <varlist>) | (<type> SYM)
vallist   := <expr> ',' <vallist> | <expr>
expr      := <exists> | <forall> | <logic_or> | <math_t1> | 
             <attr> | <index> | <app>
logic_or  := <expr> 'or' <expr> | <logic_and>
logic_and := <expr> 'and' <expr> | <logic_not>
logic_not := 'not' <expr> | <cmp>
cmp       := <expr> ('='|'!='|'>'|'>='|'<'|'<=') <expr>
math_t1   := <math_t1> ('+'|'-') <math_t1> | <math_t2>
math_t2   := <math_t1> ('*'|'/'|'%') <math_t1> | <math_t3>
math_t3   := NUM | STR | BOOL | EMPTY | SYM
attr      := <expr> '.' <sym>
index     := <expr> '[' <expr> ']'
app       := <expr> '(' <vallist> ')'
type      := SYM

** v0.1
*** Terminals
   num    = "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" ;
   char   = "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" ; 
   sym    = "!" | "@" | "#" | "$" |"%" | "^" | "*" | "-" | "_";
   string = ('"', (" " | num | char | sym)*, '"') | ("'", (" " | num | char | sym)*, "'")
   bool   = "True" | "False"
   none   = "None"
   var    = ("_" | char), (sym | char | num)*
   ws     = " "
  
*** Logic
   logic      = ("(", logic_or, ")") | logic_or
   logic_or   = (logic, ws+, "or", ws+, logic) | logic_and
   logic_and  = (logic, ws+, "and", ws+, logic) | logic_flow | logic_comp
   logic_flow = (query, ws*, "~", ws*, query, ">", logic_flow) | query
   logic_comp = (logic, (ws*, ("==" | "!=" | "<" | "<=" | ">" | ">="), ws*), logic) | logic_not
   logic_not  = (ws*, "not", ws*, logic) | math_add
   math       = ("(", math_add, ")") | math_add
   math_add   = (math, (ws*, "+" | "-", ws*), math) | math_mult
   math_mult  = (math, (ws*, "*" | "/" | "%", ws*), math) | app
   app        = (app, "(", logic*, ")") | attr
   index      = (app, "[", logic, "]") | attr
   attr       = (app, ".", app) | query
   query      = ("{", ws*, var, ws*, [ws, "in", ws+, query, ws*], "|", ws*, logic, "}") | ls
   ls         = "[", ws*, logic*, ",", ws*, [logic], "]" | terms
   terms      = var | num | string | bool | none
   
*** Structure
   program    = (let | resolve)+
   let        = "let ", var, ws*, "=", ws*, logic
   
*** Resolvables
   exists    = "exists", ws+, logic
   forall    = "forall", ws+, logic
   resolve   = exists | forall
   
* AST
** Terminals
   var    = "(", "var", <string>, ")"
   num    = "(", "number", [0-9]+, ")"
   string = "(", "string", "<string>", ")"
   none   = "(", "empty", <None>, ")"   
   
** Program
   program = "(", "program", (let | compare | decl)*, ")"
   compare = "(", ("==" | ">" | ">=" | "<" | "<=" | "!="), comp, comp, ")"
   comp    = logic | not | list | func | math | path | var | string | bool | none
   let     = "(", "let", var, comp, ")"
   logic   = "(", ("and" | "or"), comp, comp, ")"
   not     = "(", "not", comp, ")"
   list    = "(", "list",  comp*, ")"
   func    = "(", "app", <func>, comp*, ")"
   math    = "(", ("+" | "-" | "/" | "*"), comp, comp, ")"
   
** Graph
   node = "(", "node", logic*, ")"
   path = "(", "path", logic*, (node | var), (node | path | var), ")"
   flow = "(", "flow", logic*, (node | var), (node | flow | var), ")"
   
** Compositions
   decl = "(", ("exists" | "forall"), (var | node | flow | path), ")"
   
* Type system
| expression           | type                                     |
|----------------------+------------------------------------------|
| assert               | assertion -> None                        |
| let                  | τ,Γ -> τ,Γ′                              |
| exists               | query ..., assertion -> assertion        |
| forall               | query ..., assertion -> assertion        |
| {}                   | bool -> query                            |
| and                  | bool, bool -> bool                       |
|                      | assertion, assertion -> assertion        |
| or                   | bool, bool -> bool                       |
|                      | assertion, assertion -> assertion        |
| not                  | bool -> bool                             |
|                      | assertion -> assertion                   |
| ~>                   | assertion, query, assertion -> assertion |
| +-*/%                | number, number -> number                 |
| . []                 | assertion, string -> τ                   |
|                      | assertion, number -> τ                   |
| ==, !=, <, >, <=, >= | number, number -> bool                   |
|                      | string, string -> bool                   |
| "[^"]*"              | string                                   |
| '[^']*'              | string                                   |
| 0-9+([.]0-9+)?       | number                                   |
| None                 | none                                     |
| True, False          | bool                                     |
